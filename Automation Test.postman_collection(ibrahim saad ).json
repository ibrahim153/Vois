{
	"info": {
		"_postman_id": "b6f79716-9ce2-4c30-a14c-d636752651a7",
		"name": "Automation Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get all posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get post by {id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"    //parse the response json and test four properties\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.title).to.be.a('string');\r",
							"     pm.expect(responseJson.title.length).to.gt(0);\r",
							"    pm.expect(responseJson.body).to.be.a('string');\r",
							"    pm.expect(responseJson.body.length).to.gt(0);\r",
							"    pm.expect(responseJson.userId).to.be.a('number');\r",
							"     pm.expect(responseJson.id).to.be.a('number');\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"    //parse the response json and test four properties\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.title).to.be.a('string');\r",
							"     pm.expect(responseJson.title.length).to.gt(0);\r",
							"    pm.expect(responseJson.body).to.be.a('string');\r",
							"    pm.expect(responseJson.body.length).to.gt(0);\r",
							"    pm.expect(responseJson.userId).to.be.a('number');\r",
							"    pm.expect(responseJson.id).to.be.a('number')\r",
							"\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"title\": \"foo\",\r\n    \"body\": \"bar\",\r\n    \"userId\": 1\r\n}"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	]
}